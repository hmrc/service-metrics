# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = service-metrics

# HttpV2 client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Play Modules
play.modules.enabled += "uk.gov.hmrc.servicemetrics.Module"
play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Microservice specific config

mongodb {
  uri = "mongodb://localhost:27017/service-metrics"
}

microservice {
  services {
    carbon-api {
      host = "localhost"
      port = 8461
    }

    elasticsearch {
      host                  = "localhost"
      port                  = 9200
      username              = "changeme"
      development.password  = "changeme"
      integration.password  = "changeme"
      qa.password           = "changeme"
      staging.password      = "changeme"
      externaltest.password = "changeme"
      production.password   = "changeme"
    }

    platops-github-proxy {
       host = "localhost"
       port = 8466
    }

    releases-api {
      host = "localhost"
      port = 8008
    }

    slack-notifications {
      host = "localhost"
      port = 8866
    }

    teams-and-repositories {
      host = "localhost"
      port = 9015
    }
  }
}

clickhouse.development.url  = "http://localhost:8461/clickhouse"
clickhouse.qa.url           = "http://localhost:8461/clickhouse"
clickhouse.staging.url      = "http://localhost:8461/clickhouse"
clickhouse.externaltest.url = "http://localhost:8461/clickhouse"
clickhouse.production.url   = "http://localhost:8461/clickhouse"

scheduler {
  metrics {
    enabled      = false
    interval     = 1.hour
    initialDelay = 1.second
  }
  provisioning {
    enabled      = false
    interval     = 1.days
    initialDelay = 1.minute
  }
  notifications {
    enabled      = false
    interval     = 1.hour
    initialDelay = 5.minutes
  }
}

# How many days between each data point in the `mongoCollectionSizesHistory` collection
# 1 == every day
mongo-collection-size-history.frequency = 1.days
long-running-query-threshold            = 3000.millis

alerts {
  slack {
    basicAuth {
      username = test
      password = test
    }
    auth-token            = changeme
    throttling-period     = 7.days
    notify-teams          = false
    notification-channels = [] # Slack channels to notify for monitoring
    kibana {
      baseUrl = "http://logs.${env}.local"
      links  = {
        slow-running-query = ${alerts.slack.kibana.baseUrl}"""/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:'${from}',to:'${to}'))&_a=(columns:!(collection,database,mongo_db,operation,duration,scan),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:type,negate:!f,params:(query:mongodb),type:phrase),query:(match_phrase:(type:mongodb))),('$state':(store:appState),meta:(alias:!n,disabled:!f,field:duration,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:duration,negate:!f,params:(gte:3000,lt:!n),type:range,value:(gte:3000,lt:!n)),query:(range:(duration:(gte:3000,lt:!n)))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:mongo_db,negate:!t,params:!(backup_mongo,backup_protected-mongo,backup_protected-auth-mongo,backup_protected-centralised-auth-mongo,backup_protected-rate-mongo,backup_public-mongo),type:phrases,value:!(backup_mongo,backup_protected-mongo,backup_protected-auth-mongo,backup_protected-centralised-auth-mongo,backup_protected-rate-mongo,backup_public-mongo)),query:(bool:(minimum_should_match:1,should:!((match_phrase:(mongo_db:backup_mongo)),(match_phrase:(mongo_db:backup_protected-mongo)),(match_phrase:(mongo_db:backup_protected-auth-mongo)),(match_phrase:(mongo_db:backup_protected-centralised-auth-mongo)),(match_phrase:(mongo_db:backup_protected-rate-mongo)),(match_phrase:(mongo_db:backup_public-mongo)))))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:database.raw,negate:!f,params:(query:${database}),type:phrase),query:(match_phrase:(database.raw:${database})))),grid:(columns:(operation:(width:667))),hideChart:!f,index:match_all_logstash_ingested_logs_kibana_index_pattern,interval:auto,query:(language:lucene,query:''),sort:!(!('@timestamp',desc)))"""
        non-indexed-query  = ${alerts.slack.kibana.baseUrl}"""/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:'${from}',to:'${to}'))&_a=(columns:!(collection,database,mongo_db,operation,duration,scan),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:type,negate:!f,params:(query:mongodb),type:phrase),query:(match_phrase:(type:mongodb))),('$state':(store:appState),meta:(alias:!n,disabled:!f,field:scan,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:scan,negate:!f,params:(query:COLLSCAN),type:phrase),query:(match_phrase:(scan:COLLSCAN))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:mongo_db,negate:!t,params:!(backup_mongo,backup_protected-mongo,backup_protected-auth-mongo,backup_protected-centralised-auth-mongo,backup_protected-rate-mongo,backup_public-mongo),type:phrases,value:!(backup_mongo,backup_protected-mongo,backup_protected-auth-mongo,backup_protected-centralised-auth-mongo,backup_protected-rate-mongo,backup_public-mongo)),query:(bool:(minimum_should_match:1,should:!((match_phrase:(mongo_db:backup_mongo)),(match_phrase:(mongo_db:backup_protected-mongo)),(match_phrase:(mongo_db:backup_protected-auth-mongo)),(match_phrase:(mongo_db:backup_protected-centralised-auth-mongo)),(match_phrase:(mongo_db:backup_protected-rate-mongo)),(match_phrase:(mongo_db:backup_public-mongo)))))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:database.raw,negate:!f,params:(query:${database}),type:phrase),query:(match_phrase:(database.raw:${database}))),('$state':(store:appState),meta:(alias:!n,disabled:!f,field:operation,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:operation,negate:!t,params:(query:%22no-index-required%22),type:phrase),query:(match_phrase:(operation:%22no-index-required%22)))),grid:(columns:(operation:(width:667))),hideChart:!f,interval:auto,query:(language:lucene,query:''),sort:!(!('@timestamp',desc)))"""
        orphan-token       = ${alerts.slack.kibana.baseUrl}"""/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:'${from}',to:'${to}'))&_a=(columns:!(app,message,mdtp_component),dataSource:(dataViewId:match_all_logstash_ingested_logs_kibana_index_pattern,type:dataView),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,field:app.raw,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:app.raw,negate:!f,params:(query:internal-auth),type:phrase),query:(match_phrase:(app.raw:internal-auth))),('$state':(store:appState),meta:(alias:!n,disabled:!f,field:level.raw,index:match_all_logstash_ingested_logs_kibana_index_pattern,key:level.raw,negate:!f,params:(query:WARN),type:phrase),query:(match_phrase:(level.raw:WARN)))),grid:(columns:(app:(width:255))),interval:auto,query:(language:lucene,query:'%22An%20orphaned%20token%20exists%20for%20principal:%22'),sort:!(!('@timestamp',desc)))"""
        container-kills    = ${alerts.slack.kibana.baseUrl}"""/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:'${from}',to:'${to}'))&_a=(columns:!(service,microservice_version,container_kill_reason,container_uuid),dataSource:(dataViewId:match_all_logstash_ingested_container_kills_logs_kibana_index_pattern,type:dataView),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,index:match_all_logstash_ingested_container_kills_logs_kibana_index_pattern,key:service,negate:!f,params:(query:${service}),type:phrase),query:(match_phrase:(service:${service})))),interval:auto,query:(language:kuery,query:''),sort:!(!('@timestamp',desc)))"""
      }
    }
  }
}
